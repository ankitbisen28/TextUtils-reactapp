{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","onChange","event","target","value","background","rows","disabled","length","newText","toUpperCase","toLowerCase","navigator","clipboard","writeText","split","filter","element","defaultProps","App","setMode","cls","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.872e910e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'white',\r\n    //     backgroundColor: 'black',\r\n    //     border: '1px solid white'\r\n    // })\r\n\r\n    let myStyle ={\r\n        color: props.mode === 'dark'?'white':'#042743',\r\n        backgroundColor: props.mode === 'dark'?'rgb(35 74 104)':'white', \r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <h1 className='my-3' style={{color: props.mode === 'dark'?'white':'#042743',}}>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                          <strong>Analyze Your Text</strong>  \r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\"> \r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                             <strong>Free to Use</strong> \r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            <strong>Browser Campatility</strong> \r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}  </Link>\r\n                        </li>\r\n                    </ul>\r\n                    <div className=\"d-flex\">\r\n                        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'set title here',\r\n    aboutText: 'about text here'\r\n};\r\n\r\n\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=> {\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLwClick = ()=> {\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handleClearClick = ()=> {\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = '';\r\n        setText(newText);\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n    }\r\n    \r\n    const handleOnchange = (event)=> {\r\n        // console.log(\"Handal on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className='container' style={{color: props.mode=== 'dark'?'white':'#1a3852'}}>\r\n            <h1 className='my-3'>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"mytext\" onChange={handleOnchange} style={{background: props.mode=== 'dark'?'#274e70':'white', color: props.mode=== 'dark'?'white':'#1a3852'}} value={text} rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-success my-1\" onClick={handleUpClick}>Convert to Uppercase</button> \r\n            <button disabled={text.length===0} className=\"btn btn-warning mx-1\" onClick={handleLwClick}>Convert to Lowercase</button> \r\n            <button disabled={text.length===0} className=\"btn btn-dark my-1\" onClick={handleClearClick}>Clear</button> \r\n            <button disabled={text.length===0} className=\"btn btn-danger my-1 mx-1\" onClick={handleCopy}>Copy</button> \r\n        </div> \r\n        <div className=\"container\" style={{color: props.mode=== 'dark'?'white':'#1a3852'}}>\r\n            <h1>Your text summary</h1>\r\n            <p><strong>{text.split(/\\s/).filter((element)=> {return element.length!==0}).length} </strong> words and <strong>{text.length}</strong>  characters</p>\r\n            <p>{0.008 * text.split(\" \").filter((element)=> {return element.length!==0}).length} Minutes to read </p>\r\n            <h3>Priview</h3>\r\n            <p>{text.length>0?text:\"Enter something in the text box above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light') // dark mode enable or not \n  const toggleMode = (cls) => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#1a3852';\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n\n    }\n  }\n  return (\n    <>\n      <Router>\n        {/* <Navbar /> */}\n        <Navbar title=\"TextUtiles\" aboutText='About Us' mode={mode} toggleMode={toggleMode} />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode}/>\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm heading=\"Try TextUtils - Word Counter, Character Counter\" mode={mode} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}